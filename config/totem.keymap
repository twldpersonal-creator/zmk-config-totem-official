//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
    tapping-term-ms = <210>;
};

/ {
    combos {
        compatible = "zmk,combos";

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <35 26>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <35 15>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <35 5>;
        };

        pinky_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <20 31>;
        };

        search {
            bindings = <&kp LA(SPACE)>;
            key-positions = <6 7 8>;
        };

        home {
            bindings = <&to 0>;
            key-positions = <32 33 34>;
        };

        emacs_cmd {
            bindings = <&kp LC(X)>;
            key-positions = <4 3>;
        };

        TLYR-BLTH_CTRL {
            bindings = <&to 5>;
            key-positions = <32 33 34 35 36 37>;
        };
    };

    behaviors {
        Lpar_shift_Rpar: Lpar_shift_Rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_SHIFT_RPAR";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        Fslash_alt_Bslash: Fslash_alt_Bslash {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLASH_ALT_BSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        Lbrkt_alt_Rbrkt: Lbrkt_alt_Rbrkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRKT_ALT_RBRKT";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        period_LALT_colon: period_LALT_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_LALT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        comma_alt_semi: comma_alt_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_ALT_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Base_layer {
            bindings = <
       &kp B           &kp Y           &kp O        &kp U             &kp APOS     &Lpar_shift_Rpar  &kp L          &kp D        &kp W            &kp V
       &mt LEFT_WIN C  &mt LEFT_ALT I  &mt LCTRL E  &mt LEFT_SHIFT A  &kp COMMA    &kp DOT           &mt RSHIFT H   &mt RCTRL T  &mt RIGHT_ALT S  &mt RIGHT_GUI N
&kp Q  &kp G           &kp X           &kp J        &kp K             &kp MINUS    &kp SLASH         &kp R          &kp M        &kp F            &kp P            &kp Z
                                       &mo 2        &kp SPACE         &lt 3 TAB    &kp RET           &kp BACKSPACE  &mo 1
            >;

            label = "base";
        };

        Number_Symbol {
            bindings = <
        &kp MINUS     &kp LS(STAR)  &kp LS(DLLR)  &kp LS(POUND)  &kp LBKT    &kp RBKT  &kp LS(EXCL)  &kp LS(PRCNT)  &kp EQUAL  &kp LS(EQUAL)
        &kp NUMBER_4  &kp N3        &kp N2        &kp N1         &kp N0      &kp N9    &kp N5        &kp NUMBER_6   &kp N7     &kp N8
&trans  &trans        &trans        &trans        &trans         &trans      &trans    &kp PERIOD    &trans         &trans     &trans         &trans
                                    &trans        &trans         &trans      &trans    &trans        &trans
            >;

            label = "NUMSYM";
        };

        Nav {
            bindings = <
                             &kp LS(LA(LG(KP_NUMBER_4)))  &kp LS(LA(LG(KP_NUMBER_3)))  &kp LS(LA(LG(KP_NUMBER_2)))  &kp LS(LA(LG(KP_NUMBER_1)))  &kp LS(LA(LG(KP_NUMBER_0)))    &kp HOME          &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp END
                             &trans                       &trans                       &kp LS(TAB)                  &kp TAB                      &kp LA(SPACE)                  &kp LS(LC(LEFT))  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LS(LC(RIGHT))
&kp LS(LA(LG(KP_NUMBER_5)))  &trans                       &trans                       &trans                       &trans                       &trans                         &trans            &trans        &trans    &trans         &trans             &trans
                                                                                       &trans                       &trans                       &trans                         &trans            &kp LEFT_WIN  &trans
            >;
        };

        layer_select {
            bindings = <
        &trans  &trans  &trans  &tog 4  &trans    &trans  &trans      &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &bt BT_NXT  &trans
            >;
        };

        game {
            bindings = <
         &kp N4     &kp NUMBER_1  &kp Q   &kp E      &kp R     &trans  &trans  &trans  &trans  &trans
         &kp LSHFT  &kp A         &kp W   &kp D      &kp N2    &trans  &trans  &trans  &trans  &trans
&kp TAB  &kp M      &kp X         &kp S   &kp C      &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                                  &kp N3  &kp SPACE  &kp Z     &trans  &trans  &trans
            >;
        };

        BLTH_CTRL {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
